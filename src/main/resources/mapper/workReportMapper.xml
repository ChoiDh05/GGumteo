<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.app.ggumteo.mapper.report.WorkReportMapper">
    <!--영상 신고 목록-->
    <select id="selectVideoReports" resultType="WorkReportDTO">
        select
        p.id as postId,
        p.post_title as postTitle,
        p.post_type as postType,
        mp.profile_name as profileName,
        mp.profile_email as profileEmail,
        rpt.profile_name as reportProfileName, -- 신고한 사람의 이름
        rpt.profile_email as reportProfileEmail, -- 신고한 사람의 이메일
        p.created_date as postCreatedDate,
        w.genre_type as genreType,
        w.read_count as readCount,
        COALESCE(AVG(r.star), 0) as star, -- 댓글 별점 평균, NULL일 경우 0으로 표시
        w.work_price as workPrice,
        wr.report_status as reportStatus,
        wr.created_date as reportCreatedDate,
        wr.report_contents as reportContents
        from
        tbl_post p
        join
        tbl_member_profile mp on p.member_profile_id = mp.id
        join
        tbl_work w on w.id = p.id
        left join
        tbl_reply r on r.work_id = w.id
        join
        tbl_work_report wr on wr.work_id = w.id
        join
        tbl_member_profile rpt on wr.member_profile_id = rpt.id -- 신고한 사람의 프로필 정보
        where
        p.post_type = 'WORKVIDEO'
        <!-- 신고 관리 조건 -->
        <if test="order == 'reportStatus'">
            and wr.report_status = 'REPORT'
        </if>
        <!-- 통합 검색 조건: 제목, 장르, 작성자 중 하나에 검색어 포함 -->
        <if test="search != null and search != ''">
            and (
            p.post_title like concat('%', #{search}, '%')
            or w.genre_type like concat('%', #{search}, '%')
            or mp.profile_name like concat('%', #{search}, '%')
            )
        </if>
        group by
        p.id, p.post_title, p.post_type, mp.profile_name, mp.profile_email,
        rpt.profile_name, rpt.profile_email, p.created_date, w.genre_type,
        w.read_count, w.work_price, wr.report_status, wr.created_date, wr.report_contents
        <!-- 정렬 조건 -->
        <if test="order != null and order != ''">
            order by
            <choose>
                <when test="order == 'postCreatedDate'">p.created_date desc</when>
                <when test="order == 'readCount'">w.read_count desc</when>
                <when test="order == 'star'">star desc</when>
                <!-- 신고관리일 경우 기본 정렬 -->
                <when test="order == 'reportStatus'">p.created_date desc</when>
            </choose>
        </if>
        <!-- 기본 정렬 조건 -->
        <if test="order == null or order == ''">
            order by p.created_date desc
        </if>
        <!-- 페이징 -->
        limit #{pagination.startRow}, #{pagination.rowCount}
    </select>

    <!-- 영상 전체 신고 내역 수 조회 -->
    <select id="countVideoReports" resultType="int">
        select
        count(*)
        from
        tbl_post p
        join
        tbl_member_profile mp on p.member_profile_id = mp.id
        join
        tbl_work w on w.id = p.id
        left join
        tbl_reply r on r.work_id = w.id
        join
        tbl_work_report wr on wr.work_id = w.id
        join
        tbl_member_profile rpt on wr.member_profile_id = rpt.id -- 신고한 사람의 프로필 정보
        where
        p.post_type = 'WORKVIDEO'
        <!-- 신고 관리 조건 -->
        <if test="order == 'reportStatus'">
            and wr.report_status = 'REPORT'
        </if>
        <!-- 통합 검색 조건 -->
        <if test="search != null and search != ''">
            and (
            p.post_title like concat('%', #{search}, '%')
            or w.genre_type like concat('%', #{search}, '%')
            or mp.profile_name like concat('%', #{search}, '%')
            )
        </if>
    </select>

    <!-- 영상 신고 상태 업데이트 쿼리 -->
    <update id="videoStatusChange">
        update tbl_work_report
        set report_status = #{reportStatus}
        where work_id = #{workId}
    </update>

    <!--글 신고 목록-->
    <select id="selectTextReports" resultType="WorkReportDTO">
        select
        p.id as postId,
        p.post_title as postTitle,
        p.post_type as postType,
        mp.profile_name as profileName,
        mp.profile_email as profileEmail,
        rpt.profile_name as reportProfileName, -- 신고한 사람의 이름
        rpt.profile_email as reportProfileEmail, -- 신고한 사람의 이메일
        p.created_date as postCreatedDate,
        w.genre_type as genreType,
        w.read_count as readCount,
        COALESCE(AVG(r.star), 0) as star, -- 댓글 별점 평균, NULL일 경우 0으로 표시
        w.work_price as workPrice,
        wr.report_status as reportStatus,
        wr.created_date as reportCreatedDate,
        wr.report_contents as reportContents
        from
        tbl_post p
        join
        tbl_member_profile mp on p.member_profile_id = mp.id
        join
        tbl_work w on w.id = p.id
        left join
        tbl_reply r on r.work_id = w.id
        join
        tbl_work_report wr on wr.work_id = w.id
        join
        tbl_member_profile rpt on wr.member_profile_id = rpt.id -- 신고한 사람의 프로필 정보
        where
        p.post_type = 'WORKTEXT'
        <!-- 신고 관리 조건 -->
        <if test="order == 'reportStatus'">
            and wr.report_status = 'REPORT'
        </if>
        <!-- 통합 검색 조건: 제목, 장르, 작성자 중 하나에 검색어 포함 -->
        <if test="search != null and search != ''">
            and (
            p.post_title like concat('%', #{search}, '%')
            or w.genre_type like concat('%', #{search}, '%')
            or mp.profile_name like concat('%', #{search}, '%')
            )
        </if>
        group by
        p.id, p.post_title, p.post_type, mp.profile_name, mp.profile_email,
        rpt.profile_name, rpt.profile_email, p.created_date, w.genre_type,
        w.read_count, w.work_price, wr.report_status, wr.created_date, wr.report_contents
        <!-- 정렬 조건 -->
        <if test="order != null and order != ''">
            order by
            <choose>
                <when test="order == 'postCreatedDate'">p.created_date desc</when>
                <when test="order == 'readCount'">w.read_count desc</when>
                <when test="order == 'star'">star desc</when>
                <!-- 신고관리일 경우 기본 정렬 -->
                <when test="order == 'reportStatus'">p.created_date desc</when>
            </choose>
        </if>
        <!-- 기본 정렬 조건 -->
        <if test="order == null or order == ''">
            order by p.created_date desc
        </if>
        <!-- 페이징 -->
        limit #{pagination.startRow}, #{pagination.rowCount}
    </select>

    <!-- 글 전체 신고 내역 수 조회 -->
    <select id="countTextReports" resultType="int">
        select
        count(*)
        from
        tbl_post p
        join
        tbl_member_profile mp on p.member_profile_id = mp.id
        join
        tbl_work w on w.id = p.id
        left join
        tbl_reply r on r.work_id = w.id
        join
        tbl_work_report wr on wr.work_id = w.id
        join
        tbl_member_profile rpt on wr.member_profile_id = rpt.id -- 신고한 사람의 프로필 정보
        where
        p.post_type = 'WORKTEXT'
        <!-- 신고 관리 조건 -->
        <if test="order == 'reportStatus'">
            and wr.report_status = 'REPORT'
        </if>
        <!-- 통합 검색 조건 -->
        <if test="search != null and search != ''">
            and (
            p.post_title like concat('%', #{search}, '%')
            or w.genre_type like concat('%', #{search}, '%')
            or mp.profile_name like concat('%', #{search}, '%')
            )
        </if>
    </select>

    <!-- 글 신고 상태 업데이트 쿼리 -->
    <update id="textStatusChange">
        update tbl_work_report
        set report_status = #{reportStatus}
        where work_id = #{workId}
    </update>
</mapper>