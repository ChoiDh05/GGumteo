<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.app.ggumteo.mapper.alarm.AlarmMapper">

    <!-- Insert Apply Audition Notification -->
    <insert id="insertApplyAuditionAlarm" parameterType="map">
        INSERT INTO tbl_apply_audition_notification (member_profile_id, audition_application_id, message, is_read, create_date, sub_type)
        VALUES (#{memberProfileId}, #{auditionApplicationId}, #{message}, FALSE, CURRENT_TIMESTAMP, #{subType})
    </insert>

    <!-- Insert Reply Notification -->
    <insert id="insertReplyAlarm" parameterType="map">
        INSERT INTO tbl_reply_notification (reply_id, member_profile_id, message, is_read, create_date, sub_type)
        VALUES (#{replyId}, #{memberProfileId}, #{message}, FALSE, CURRENT_TIMESTAMP, #{subType})
    </insert>

    <!-- Insert Work Notification -->
    <insert id="insertWorkAlarm" parameterType="map">
        INSERT INTO tbl_work_notification (member_profile_id, buy_work_id, message, is_read, create_date, sub_type)
        VALUES (#{memberProfileId}, #{buyWorkId}, #{message}, FALSE, CURRENT_TIMESTAMP, #{subType})
    </insert>

    <!-- Insert Funding Product Notification -->
    <insert id="insertFundingProductAlarm" parameterType="map">
        INSERT INTO tbl_funding_product_notification (member_profile_id, buy_funding_product_id, message, is_read, create_date, sub_type)
        VALUES (#{memberProfileId}, #{buyFundingProductId}, #{message}, FALSE, CURRENT_TIMESTAMP, #{subType})
    </insert>

    <!-- Select Statements -->

    <!-- Select All Alarms by Member ID -->
    <select id="selectAlarmsByMemberId" resultType="alarmDTO">
        SELECT
            id,
            message AS alarmContent,
            member_profile_id AS memberProfileId,
            create_date AS createdDate,
            is_read AS isRead,
            audition_application_id AS dataId,
            'audition' AS alarmType
        FROM tbl_apply_audition_notification
        WHERE member_profile_id = #{memberProfileId}

        UNION ALL

        SELECT
            id,
            message AS alarmContent,
            member_profile_id AS memberProfileId,
            create_date AS createdDate,
            is_read AS isRead,
            reply_id AS dataId,
            'reply' AS alarmType
        FROM tbl_reply_notification
        WHERE member_profile_id = #{memberProfileId}

        UNION ALL

        SELECT
            id,
            message AS alarmContent,
            member_profile_id AS memberProfileId,
            create_date AS createdDate,
            is_read AS isRead,
            buy_work_id AS dataId,
            'work' AS alarmType
        FROM tbl_work_notification
        WHERE member_profile_id = #{memberProfileId}

        UNION ALL

        SELECT
            id,
            message AS alarmContent,
            member_profile_id AS memberProfileId,
            create_date AS createdDate,
            is_read AS isRead,
            buy_funding_product_id AS dataId,
            'fundingProduct' AS alarmType
        FROM tbl_funding_product_notification
        WHERE member_profile_id = #{memberProfileId}

        ORDER BY createdDate DESC
            LIMIT 10
    </select>

    <!-- Select Alarms by Member ID with LIMIT 7 -->
    <select id="selectAlarmsByMemberId7" resultType="alarmDTO">
        SELECT
            id,
            message AS alarmContent,
            member_profile_id AS memberProfileId,
            create_date AS createdDate,
            is_read AS isRead,
            audition_application_id AS dataId,
            'audition' AS alarmType
        FROM tbl_apply_audition_notification
        WHERE member_profile_id = #{memberProfileId}

        UNION ALL

        SELECT
            id,
            message AS alarmContent,
            member_profile_id AS memberProfileId,
            create_date AS createdDate,
            is_read AS isRead,
            reply_id AS dataId,
            'reply' AS alarmType
        FROM tbl_reply_notification
        WHERE member_profile_id = #{memberProfileId}

        UNION ALL

        SELECT
            id,
            message AS alarmContent,
            member_profile_id AS memberProfileId,
            create_date AS createdDate,
            is_read AS isRead,
            buy_work_id AS dataId,
            'work' AS alarmType
        FROM tbl_work_notification
        WHERE member_profile_id = #{memberProfileId}

        UNION ALL

        SELECT
            id,
            message AS alarmContent,
            member_profile_id AS memberProfileId,
            create_date AS createdDate,
            is_read AS isRead,
            buy_funding_product_id AS dataId,
            'fundingProduct' AS alarmType
        FROM tbl_funding_product_notification
        WHERE member_profile_id = #{memberProfileId}

        ORDER BY createdDate DESC
            LIMIT 7
    </select>

    <!-- Select Unread Alarms by Member ID -->
    <select id="selectUnreadAlarmsByMemberId" resultType="alarmDTO">
        SELECT
            id,
            message AS alarmContent,
            member_profile_id AS memberProfileId,
            create_date AS createdDate,
            is_read AS isRead,
            audition_application_id AS dataId,
            'audition' AS alarmType
        FROM tbl_apply_audition_notification
        WHERE member_profile_id = #{memberProfileId} AND is_read = FALSE

        UNION ALL

        SELECT
            id,
            message AS alarmContent,
            member_profile_id AS memberProfileId,
            create_date AS createdDate,
            is_read AS isRead,
            reply_id AS dataId,
            'reply' AS alarmType
        FROM tbl_reply_notification
        WHERE member_profile_id = #{memberProfileId} AND is_read = FALSE

        UNION ALL

        SELECT
            id,
            message AS alarmContent,
            member_profile_id AS memberProfileId,
            create_date AS createdDate,
            is_read AS isRead,
            buy_work_id AS dataId,
            'work' AS alarmType
        FROM tbl_work_notification
        WHERE member_profile_id = #{memberProfileId} AND is_read = FALSE

        UNION ALL

        SELECT
            id,
            message AS alarmContent,
            member_profile_id AS memberProfileId,
            create_date AS createdDate,
            is_read AS isRead,
            buy_funding_product_id AS dataId,
            'fundingProduct' AS alarmType
        FROM tbl_funding_product_notification
        WHERE member_profile_id = #{memberProfileId} AND is_read = FALSE

        ORDER BY createdDate DESC
            LIMIT 7
    </select>

    <!-- Update Alarm IsRead -->
    <update id="updateAlarmIsRead" parameterType="map">
        <choose>
            <when test="alarmType == 'audition'">
                UPDATE tbl_apply_audition_notification
                SET is_read = TRUE
                WHERE id = #{id} AND member_profile_id = #{memberProfileId} AND audition_application_id = #{dataId}
            </when>
            <when test="alarmType == 'reply'">
                UPDATE tbl_reply_notification
                SET is_read = TRUE
                WHERE id = #{id} AND member_profile_id = #{memberProfileId} AND reply_id = #{dataId}
            </when>
            <when test="alarmType == 'work'">
                UPDATE tbl_work_notification
                SET is_read = TRUE
                WHERE id = #{id} AND member_profile_id = #{memberProfileId} AND buy_work_id = #{dataId}
            </when>
            <when test="alarmType == 'fundingProduct'">
                UPDATE tbl_funding_product_notification
                SET is_read = TRUE
                WHERE id = #{id} AND member_profile_id = #{memberProfileId} AND buy_funding_product_id = #{dataId}
            </when>
            <otherwise>
                SELECT 1 FROM DUAL WHERE 1 = 0
            </otherwise>
        </choose>
    </update>

    <!-- Count Unread Alarms by SubType -->
    <select id="countUnreadAlarmsBySubtype" resultType="int">
        SELECT COUNT(*) FROM (
                                 SELECT id FROM tbl_apply_audition_notification
                                 WHERE member_profile_id = #{memberProfileId} AND sub_type = #{subType} AND is_read = 0
                                 UNION ALL
                                 SELECT id FROM tbl_reply_notification
                                 WHERE member_profile_id = #{memberProfileId} AND sub_type = #{subType} AND is_read = 0
                                 UNION ALL
                                 SELECT id FROM tbl_work_notification
                                 WHERE member_profile_id = #{memberProfileId} AND sub_type = #{subType} AND is_read = 0
                                 UNION ALL
                                 SELECT id FROM tbl_funding_product_notification
                                 WHERE member_profile_id = #{memberProfileId} AND sub_type = #{subType} AND is_read = 0
                             ) AS unread_alarms
    </select>

    <select id="selectAlarmsByMemberProfileId" resultType="alarmDTO">
        select
            w_n.id,
            w_n.message as alarmContent,
            w_n.member_profile_id as memberProfileId,
            w_n.create_date as createdDate,
            w_n.is_read as isRead,
            null as auditionApplicationId,
            null as replyId,
            w_n.buy_work_id,
            null as buyFundingProductId,
            'work' as alarmType,
            p.post_title
        from tbl_work_notification w_n
                 join tbl_buy_work bw on bw.id = w_n.buy_work_id
                 join tbl_work w on bw.work_id = w.id
                 join tbl_post p on w.id = p.id
        where w_n.member_profile_id = #{memberProfileId}
          and w_n.is_read = false

        union all

        select
            aa_n.id,
            aa_n.message as alarmContent,
            aa_n.member_profile_id as memberProfileId,
            aa_n.create_date as createdDate,
            aa_n.is_read as isRead,
            aa_n.audition_application_id,
            null as replyId,
            null as buyWorkId,
            null as buyFundingProductId,
            'audition' as alarmType,
            p.post_title
        from tbl_apply_audition_notification aa_n
                 join tbl_audition_application aa on aa_n.audition_application_id = aa.id
                 join tbl_audition a on aa.audition_id = a.id
                 join tbl_post p on a.id = p.id
        where aa_n.member_profile_id = #{memberProfileId}
          and aa_n.is_read = false

        union all

        select
            r_n.id,
            r_n.message as alarmContent,
            r_n.member_profile_id as memberProfileId,
            r_n.create_date as createdDate,
            r_n.is_read as isRead,
            null as auditionApplicationId,
            r_n.reply_id,
            null as buyWorkId,
            null as buyFundingProductId,
            'reply' as alarmType,
            p.post_title
        from tbl_reply_notification r_n
                 join tbl_reply r on r.id = r_n.reply_id
                 join tbl_work w on w.id = r.work_id
                 join tbl_post p on w.id = p.id
        where r_n.member_profile_id = #{memberProfileId}
          and r_n.is_read = false

        union all

        select
            fp_n.id,
            fp_n.message as alarmContent,
            fp_n.member_profile_id as memberProfileId,
            fp_n.create_date as createdDate,
            fp_n.is_read as isRead,
            null as auditionApplicationId,
            null as replyId,
            null as buyWorkId,
            fp_n.buy_funding_product_id,
            'fundingProduct' as alarmType,
            p.post_title
        from tbl_funding_product_notification fp_n
                 join tbl_buy_funding_product bfp on bfp.id = fp_n.buy_funding_product_id
                 join tbl_funding_product fp on fp.id = bfp.funding_product_id
                 join tbl_funding f on fp.funding_id = f.id
                 join tbl_post p on f.id = p.id
        where fp_n.member_profile_id = #{memberProfileId}
          and fp_n.is_read = false

        order by createdDate desc
            limit #{startRow}, #{moreRowCount};
    </select>

</mapper>
