<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.app.ggumteo.mapper.work.WorkMapper">


    <sql id="search">
        <if test="search.keyword != null and search.keyword != ''">
            and (
            p.post_title like concat('%', #{search.keyword}, '%')
            or p.post_content like concat('%', #{search.keyword}, '%')
            or mp.profile_nickname like concat('%', #{search.keyword}, '%')
            )
        </if>
        <if test="search.genreType != null and search.genreType != ''">
            and w.genre_type = #{search.genreType}
        </if>
        <if test="search.postType != null and search.postType != ''">
            and upper(p.post_type) = upper(#{search.postType})
        </if>
    </sql>
    <!-- 작품 삽입 -->
    <insert id="insert" parameterType="com.app.ggumteo.domain.work.WorkVO">
        insert into tbl_work (id, work_price, genre_type, read_count, file_content, thumbnail_file_id)
        values (#{id}, #{workPrice}, #{genreType}, #{readCount}, #{fileContent}, #{thumbnailFileId})
    </insert>


    <!-- 작품 id로 작품 조회 (썸네일 파일 ID 포함) -->
    <select id="selectById" resultType="workDTO">
        select
        w.id, w.work_price, w.file_content, w.read_count, w.genre_type,
        p.post_title, p.post_content, p.member_profile_id, p.created_date, p.updated_date,
        f.file_name as thumbnailFileName,
        f.file_path as thumbnailFilePath,  <!-- 추가된 부분 -->
        w.thumbnail_file_id as thumbnailFileId,
        mp.profile_nickname,
        m.profile_img_url as profileImgUrl
        from
        tbl_work w
        join tbl_post p on w.id = p.id
        join tbl_member_profile mp on p.member_profile_id = mp.id
        join tbl_member m on mp.member_id = m.id
        left join tbl_file f on w.thumbnail_file_id = f.id
        where
        w.id = #{id}
    </select>




    <!-- 조회수 증가 -->
    <update id="increaseReadCount" parameterType="Long">
        update tbl_work
        set read_count = read_count + 1
        where id = #{id}
    </update>

    <!-- 작품 정보 수정 (썸네일 파일 ID 포함) -->
    <update id="updateWork">
        update tbl_work
        set
        work_price = #{workPrice},
        file_content = #{fileContent},
        genre_type = #{genreType}
        <if test="thumbnailFileId != null">
            , thumbnail_file_id = #{thumbnailFileId}
        </if>
        where id = #{id}
    </update>

    <!-- 게시글 내용 수정 -->
    <update id="updatePost">
        update tbl_post
        set
            post_title = #{postTitle},
            post_content = #{postContent},
            updated_date = current_timestamp
        where id = #{id}
    </update>

    <!-- 작품 삭제 -->
    <delete id="deleteById" parameterType="Long">
        delete from tbl_work
        where id = #{id}
    </delete>

    <!-- 게시물 삭제 -->
    <delete id="deletePostById" parameterType="Long">
        delete from tbl_post
        where id = #{id}
    </delete>

    <!-- 작품 목록 조회 및 썸네일 불러오기 -->
    <select id="selectAllWithThumbnailAndSearchAndType" resultType="workDTO" parameterType="map">
        select
        w.id, w.work_price, w.read_count, w.genre_type,
        p.post_title, p.post_content, p.member_profile_id, p.created_date, p.updated_date,
        f.file_name as thumbnailFileName,  <!-- 변경된 부분 -->
        f.file_path as thumbnailFilePath,
        mp.profile_nickname,
        m.profile_img_url as profileImgUrl,
        ifnull(round(avg(r.star), 1), 0) as star
        from
        tbl_work w
        join tbl_post p on w.id = p.id
        join tbl_member_profile mp on p.member_profile_id = mp.id
        join tbl_member m on mp.member_id = m.id
        left join tbl_reply r on w.id = r.work_id
        left join tbl_file f on w.thumbnail_file_id = f.id
        where 1 = 1
        <include refid="search"/>
        group by w.id
        order by w.id desc
        limit #{pagination.startRow}, #{pagination.rowCount}
    </select>




    <!-- 검색 조건이 포함된 총 작품 수 조회 -->
    <select id="selectTotalWithSearchAndType" parameterType="map" resultType="int">
        select count(*)
        from tbl_work w
        join tbl_post p on w.id = p.id
        join tbl_member_profile mp on p.member_profile_id = mp.id
        where w.id is not null
        <include refid="search"/>
    </select>

    <!-- 상세보기에서 다중 파일 조회 -->
    <select id="selectFilesByPostId" resultType="postFileDTO">
        select
        f.id as fileId, f.file_name, f.file_path, f.file_size, f.file_type
        from
        tbl_post_file pf
        join tbl_file f on pf.file_id = f.id  <!-- 수정된 부분 -->
        where pf.post_id = #{postId}
        order by pf.id
    </select>

    <!-- 같은 장르의 최신순 3개 작품 조회 -->
    <select id="selectThreeByGenre" resultType="workDTO" parameterType="map">
        select
        w.id, w.work_price, p.post_title, p.created_date,
        mp.profile_nickname as profileNickName,
        m.profile_img_url as profileImgUrl,
        f.file_name as thumbnailFileName,  <!-- 변경된 부분 -->
        f.file_path as thumbnailFilePath,  <!-- 추가된 부분 -->
        ifnull(round(avg(r.star), 1), 0) as star
        from
        tbl_work w
        join tbl_post p on w.id = p.id
        join tbl_member_profile mp on p.member_profile_id = mp.id
        join tbl_member m on mp.member_id = m.id
        left join tbl_reply r on w.id = r.work_id
        left join tbl_file f on w.thumbnail_file_id = f.id
        where w.genre_type = #{genreType} and w.id != #{workId}
        and p.post_type = #{postType}
        group by w.id
        order by p.created_date desc
        limit 3
    </select>



    <!-- 같은 작가의 작품 3개 불러오기 -->
    <select id="selectThreeByAuthor" resultType="workDTO" parameterType="map">
        select
        w.id, w.work_price, w.read_count, w.genre_type,
        p.post_title, p.post_content, p.member_profile_id, p.created_date, p.updated_date,
        f.file_name as thumbnailFileName,  <!-- 변경된 부분 -->
        f.file_path as thumbnailFilePath,  <!-- 추가된 부분 -->
        mp.profile_nickname,
        m.profile_img_url as profileImgUrl,
        ifnull(round(avg(r.star), 1), 0) as star
        from
        tbl_work w
        join tbl_post p on w.id = p.id
        join tbl_member_profile mp on p.member_profile_id = mp.id
        join tbl_member m on mp.member_id = m.id
        left join tbl_file f on w.thumbnail_file_id = f.id
        left join tbl_reply r on r.work_id = w.id
        where p.member_profile_id = #{memberProfileId} and w.id != #{workId}
        and p.post_type = #{postType}
        group by w.id
        order by p.created_date desc
        limit 3
    </select>


    <!-- 썸네일 파일 ID 초기화 -->
    <update id="updateThumbnailFileId">
        update tbl_work
        set thumbnail_file_id = #{thumbnailFileId}
        where id = #{workId}
    </update>


<!--    메인페이지-->
    <select id="selectMostReadTextWorkForMainPage" resultType="workDTO">
        select
            w.id,
            w.genre_type,
            w.read_count,
            p.post_title,
            p.post_content,
            p.created_date,
            mp.profile_nickname as profileName,
            m.profile_img_url as profileImgUrl,
            f.file_name as thumbnailFileName,
            f.file_path as thumbnailFilePath,
            ifnull(round(avg(r.star), 1), 0) as averageRating
        from
            tbl_work w
                join tbl_post p on w.id = p.id
                join tbl_member_profile mp on p.member_profile_id = mp.id
                join tbl_member m on mp.member_id = m.id
                left join tbl_reply r on w.id = r.work_id
                left join tbl_file f on w.thumbnail_file_id = f.id
        where
            p.post_type = 'WORKTEXT'
        group by
            w.id
        order by
            w.read_count desc
            limit 1
    </select>



    <select id="selectMostReadVideoWorkForMainPage" resultType="workDTO">
        select
            w.id,
            w.genre_type as genre,
            w.read_count,
            p.post_title,
            p.post_content,
            p.created_date,
            mp.profile_nickname as profileName,
            m.profile_img_url as profileImgUrl,
            f.file_name as thumbnailFileName,
            f.file_path as thumbnailFilePath,
            ifnull(round(avg(r.star), 1), 0) as averageRating
        from
            tbl_work w
                join tbl_post p on w.id = p.id
                join tbl_member_profile mp on p.member_profile_id = mp.id
                join tbl_member m on mp.member_id = m.id
                left join tbl_reply r on w.id = r.work_id
                left join tbl_file f on w.thumbnail_file_id = f.id
        where
            p.post_type = 'WORKVIDEO'
        group by
            w.id
        order by
            w.read_count desc
            limit 1
    </select>










    <!--  마이페이지  -->
    <!--  내 작품 조회  -->
    <select id="selectByMemberId" resultType="workDTO">
        select w.id, w.genre_type, w.thumbnail_file_id as thumbnailFileId,
               p.id, p.post_title, p.post_content, p.post_type, p.member_profile_id,
               p.created_date, mp.profile_nickname,
               mp.member_id, m.profile_img_url,
               fl.file_name as thumbnailFileName ,fl.file_path as thumbnailFilePath
        from tbl_work w
                 join tbl_post p on w.id = p.id and p.post_type = #{postType}
                 join tbl_member_profile mp on p.member_profile_id = mp.id
                 join tbl_member m on mp.member_id = m.id and m.id = #{memberId}
                 join tbl_file fl on w.thumbnail_file_id = fl.id
        order by w.id desc
        limit #{myWorkAndFundingPagination.startRow}, #{myWorkAndFundingPagination.rowCount}
    </select>

    <!-- 내 작품 게시글 전체 갯수  -->
    <select id="selectCount">
        select count(*) from tbl_work w
        join tbl_post p on w.id = p.id and p.post_type = #{postType}
        join tbl_member_profile mp on p.member_profile_id = mp.id
        join tbl_member m on mp.member_id = m.id and m.id = #{memberId}
    </select>

    <!--  내 작품 정보 조회  -->
    <select id="selectByIdAndPostType" resultType="workDTO">
        select w.id, w.work_price, w.genre_type, w.file_content, w.read_count
        from tbl_work w join tbl_post p
        on w.id = p.id and w.id = #{id} and p.post_type = #{postType}
    </select>
</mapper>
